#!/bin/sh
# devtmpfs does not get automounted for initramfs

mount -t devtmpfs devtmpfs /dev
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console

echo "Mounting virtual filesystems"
mount -o remount,rw / / # REMOUNT_ROOTFS_RW
mkdir -p /dev/pts /dev/snd
mount -t proc proc /proc
mount -t devpts devpts /dev/pts
mount -t tmpfs tmpfs /tmp
mount -t sysfs sysfs /sys
mount -t usbfs usbfs /proc/bus/usb
mount -t debugfs debugfs /sys/kernel/debug

# Reset BVN
echo -n "Reset BVN... "
devmem 0x10404318 32 0x100
devmem 0x1040431c 32 0x100
echo "done"

# Detect the USB device for installation
if [ -e /proc/scsi/usb-storage ]; then
	echo "Skip the rest of boot process for debug."

	# Start udev daemon
	/etc/init.d/S10udev start

	echo "Mounting USB stick"
	mkdir -p /tmp/usb
	sleep 5
	mount -t vfat /dev/usb /tmp/usb
	sleep 1
	[ -e /tmp/usb/loader.bin ] && ginstall.py --loader=/tmp/usb/loader.bin
	[ -e /tmp/usb/bruno_ginstall_image.tgz ] && ginstall.py \
		--tar=/tmp/usb/bruno_ginstall_image.tgz --partition=primary

	# Install new sageserver tarball if exists
	if [ -e /tmp/usb/sagetv_server.tar.gz ]; then
		# Mount filesystems
		/etc/init.d/S04volcheck start
		# hack...
		ubiattach -m 4 -d 0 /dev/ubi_ctrl
		mount -t squashfs /dev/mtdblock11 /rootfs
		echo "Installing new sagetv_server tarball"
		rm -rf /user/rw/app/sage
		mkdir -p /user/rw/app/sage
		cp -a /rootfs/app/sage/* /user/rw/app/sage
		gunzip -c /tmp/usb/sagetv_server.tar.gz | tar -C /user/rw/app/sage -xf -
		[ -e /user/rw/app/sage/version ] && echo "Installed sagetv_server $(cat /user/rw/app/sage/version)"
		umount /rootfs
		/etc/init.d/S04volcheck stop
	fi
	echo "Please take the usb storage out and reboot..."
	sleep 30
	exit 0
fi

. /etc/init.d/rc.sysinit
# :TODO: (by kedong) need to figure out a way to avoid stopping the network.
/etc/init.d/S40network stop
/etc/init.d/S10udev stop

ROOT=/rootfs
cd ${ROOT}
echo "Switching Root: mypid-$$"
mount -o move /tmp ${ROOT}/tmp
mount -o move /config ${ROOT}/config
mount -o move /user ${ROOT}/user

exec switch_root . /sbin/init 1 </dev/console >/dev/console 2>&1

echo Failed. Starting shell....
/bin/sh
# We can put some rescue logic here also
