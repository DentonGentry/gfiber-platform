#!/bin/sh
#
# Volume check service
#

ROOTFS_TYPE="squashfs"
ROOTFS_MTD_NO=9
ROOTFS_LOCATION=""
KERNEL_OPTS=$(cat /proc/cmdline)

recover_volume() {
  ubidetach -m ${1} /dev/ubi_ctrl
  flash_erase /dev/mtd${1} 0 0
  ubiattach -m ${1} -d ${2} /dev/ubi_ctrl
  ubimkvol /dev/ubi${2} -N ${3} -m
}

check_volume_and_mount () {
  ubiattach -m ${1} -d ${2} /dev/ubi_ctrl
  if [ $? -eq 0 ]; then
    num_vol=$(ubinfo --devn=${2} | python -c "import sys;[sys.stdout.write(l.split(':')[1].strip()) for l in sys.stdin if 'Volumes count' in l]")
    if [ x${num_vol} = x'0' ] || [ x${num_vol} = x ]; then
      echo "No volume associated with mtd${1} (dev:${2}), formatting..."
      recover_volume ${1} ${2} ${3}
    fi
    mount -t ${5} ubi${2}:${3} /${4}
    if [ $? -ne 0 ]; then
      echo "Mounting failed (may due to failed LEB scanning), trying to reformat the partition..."
      recover_volume ${1} ${2} ${3}
      mount -t ${5} ubi${2}:${3} /${4}
      # :TODO: If this mount also fails, need to get TR-069 to indicate back to
      # the ACS that this box has failed..
    fi
  else
    echo "Failed to attach mtd${1} to ${2}, formatting..."
    flash_eraseall /dev/mtd${1}
    ubiattach -m ${1} -d ${2} /dev/ubi_ctrl
    ubimkvol /dev/ubi${2} -N ${3} -m
  fi
}

find_rootfs () {
  for i in ${KERNEL_OPTS};
  do
    KERNEL_OPT_TYPE=${i%=*}
    KERNEL_OPT_VAL=${i#*=}
    if [ "${KERNEL_OPT_TYPE}" = "root.type" ]; then
      ROOTFS_TYPE=${KERNEL_OPT_VAL}
    elif [ "${KERNEL_OPT_TYPE}" = "nfs.path" ]; then
      ROOTFS_LOCATION=${KERNEL_OPT_VAL}
    fi
  done
}

mount_rootfs() {
  if [ "${ROOTFS_TYPE}" = "squashfs" ]; then
    cat /proc/mtd
    ROOTFS_LOCATION="/dev/mtdblock${ROOTFS_MTD_NO}"
  elif [ "${ROOTFS_TYPE}" = "nfs" ]; then
    mount -t ${ROOTFS_TYPE} -o nolock ${ROOTFS_LOCATION} /rootfs
    [ ! -d /user/rw ] && mkdir -p /user/rw /rootfs/user/rw
    [ ! -d /user/moca ] && mkdir -p /user/moca /rootfs/user/moca
    [ ! -d /user/bsa ] && mkdir -p /user/bsa /rootfs/user/bsa
    [ ! -d /user/netflix ] && mkdir -p /user/netflix /rootfs/user/netflix
    echo "Skip volume check since rootfs is nfs"
    exit 0
  fi
  if [ "${ROOTFS_LOCATION}" != "" ]; then
    echo "Rootfs found: ${ROOTFS_LOCATION}"
  else
    echo "Rootfs not found: ${ROOTFS_LOCATION} ${KERNEL_OPTS}"
    exit 1
  fi
}


case "$1" in
  start)
    echo -n "Starting volume check: "
    find_rootfs
    mount_rootfs
    mount -t squashfs ${ROOTFS_LOCATION} /rootfs
    if [ $? -ne 0 ]; then
      echo "Failed to mount rootfs, need to invoke TR-069 download"
    fi
    check_volume_and_mount 6 1 user user ubifs
    check_volume_and_mount 7 2 config config ubifs
    [ ! -d /user/rw ] && mkdir -p /user/rw
    [ ! -d /user/moca ] && mkdir -p /user/moca
    [ ! -d /user/bsa ] && mkdir -p /user/bsa
    [ ! -d /user/netflix ] && mkdir -p /user/netflix
    echo "OK"
    ;;
  stop)
    echo -n "Stopping volume check: "
    umount /user
    umount /config
    sleep 1
    ubidetach -d 1 /dev/ubi_ctrl
    ubidetach -d 2 /dev/ubi_ctrl
    echo "OK"
    ;;
  restart|reload)
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
